[[plugins]]
repo = 'uga-rosa/ccc.nvim'
on_cmd = [
  'CccPick',
  'CccConvert',
  'CccHighlighterEnable',
  'CccHighlighterDisable',
  'CccHighlighterToggle',
]
on_event = ['BufNewFile', 'BufRead']
lua_source = '''
  require("ccc").setup({
    win_opts = {
      border = "rounded",
    },
    save_on_quit = true,
    highlighter = {
      auto_enable = true,
      max_byte = 100 * 1024,
      lsp = true,
    },
  })
'''

[[plugins]]
repo = 'ysmb-wtsg/in-and-out.nvim'
on_map = { i = ['<C-CR>'] }
lua_source = '''
  vim.keymap.set("i", "<C-CR>", function()
    require("in-and-out").in_and_out()
  end)
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = ['InsertEnter']
hooks_file = "$HOOK_DIR/lexima.lua"

[[plugins]]
repo = 'kylechui/nvim-surround'
rev = '*'
frozen = true
on_map = { n = [
  'ys',
  'ds',
  'cs',
  'yS',
  'cS',
], x = [
  '<S-s>',
], i = [
  '<C-g>s',
  '<C-g>S',
] }
lua_source = '''
  require("nvim-surround").setup()
'''

[[plugins]]
repo = 'echasnovski/mini.comment'
on_event = ['BufNewFile', 'BufRead']
# on_map = { n = ['gcc'], x = ['gc'] }
lua_source = '''
  require("mini.comment").setup({
    options = {
      custom_commentstring = function()
        return require("ts_context_commentstring.internal").calculate_commentstring() or vim.bo.commentstring
      end,
    },
  })
'''

[[plugins]]
repo = 'JoosepAlviste/nvim-ts-context-commentstring'
depends = ['nvim-treesitter']
on_source = 'mini.comment'
lua_source = '''
  require("ts_context_commentstring").setup({
    enable_autocmd = false,
    languages = {
      nim = "# %s",
      toml = "# %s",
    },
  })
  vim.opt.updatetime = 100
'''

[[plugins]]
repo = 'windwp/nvim-ts-autotag'
depends = ['nvim-treesitter']
on_ft = [
  'html',
  'xml',
  'javascript',
  'javascriptreact',
  'typescript',
  'typescriptreact',
  'svelte',
]
lua_source = '''
  require("nvim-ts-autotag").setup({
    opts = {
      enable_close = true,
      enable_rename = true,
      enable_close_on_slash = false,
    },
  })
'''
